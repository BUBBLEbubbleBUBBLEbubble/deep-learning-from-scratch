"""
Numpy对数组按索引查询
"""

'''
--三种索引方法：
  基础索引
  神奇索引
  布尔索引
'''

import numpy as np

#----------------------------------------------基础索引
a = np.arange(10)  # 一维向量
b = np.arange(20).reshape(4,5)  # 二维向量，一般用大写字母
print(a)
print(b)

# # 一维数组 （和Python的List一样
# print(a[0])
# print(a[2])
# print(a[2:4])
# print(a[2:-1])  # 从第二个到倒数第二个元素（即到-1不包含-1）
# print(a[-3:])  # 从-3这个元素到最后
# print(a[:-3])  # 从开头到-3这个元素前一个

# 二维数组： 分别用行坐标、列坐标，实现行列筛选
print(b[0,0])
print(b[-1,2])  # 先选取最后一行，再选第三列
# 可以省略后续索引值，返回的数据是降低一个维度的数组
print(b[2])  # 这里的2，其实是要筛选第2行
print(b[-1])  # 最后一行
# 筛选多行
print(b[:-1])  # 除了最后一行
# 筛选多行，然后筛选多列
print(b[:2, 2:4])
# 筛选所有行，然后筛选某列
print(b[:, 2])

# 注意：切片的修改会修改原来的数组!!!
# 原因：Numpy经常要处理大数组，避免每次都复制
print(a)
a[2:4] = 666
print(a)
print(b)
b[:1, :2] = 666
print(b)


#----------------------------------------------神奇索引
# 一维数组:
#
x = np.arange(10)
print(x)
print(x[[3,4,7]])  # 即返回x的下标为3，4，7的元素
indexs = np.array([[0,2],[1,3]])
print(x[indexs])
#
x = np.arange(11, 21)
print(x)
print(x[[3,4,7]])  # 即返回x的下标为3，4，7的元素
indexs = np.array([[0,2],[1,3]])
print(x[indexs])
# 实例：获取数组中最大的前N个数字
arr = np.random.randint(1,100,10)  # 随机生成1到100之间的，10个数字
print(arr)
print(arr.argsort()[-3:])  # arr.argsort()会返回排序后的索引index  # 取最大值对应的3个下标
print(arr[arr.argsort()[-3:]])  # 上行索引对应的值，即数组中最大的前三个值

# 二维数组：
#
x = np.arange(20).reshape(4, 5)
print(x)
# 筛选多行，列可以省略
print(x[[0, 2]])  # 选第1，3行
print(x[[0, 2], :])  # 选第1，3行
# 筛选多列，行不能省略
print(x[:, [0,2,3]])  # 选第1，3，4列
# 同时指定行列-列表: 返回一维数组
print(x[[0,2,1],[0,2,3]])  # 返回的是[(0,0), (2,2), (1,3)]位置的数字


#----------------------------------------------布尔索引
# 先生成一个布尔数组，再通过这个布尔值对原数组进行索引。即布尔数组对应原数组，若为true则选择这个元素，若为false则不选择

# 一维数组
x = np.arange(10)
print(x)
#
print(x>5)  # 返回十个布尔值（False/True）
# 用比较判断得到的布尔值进行索引
print(x[x>5])  # 只返回大于5的元素
# 实例：把一维数组进行01化处理
# 比如把房价数字，变成“高房价”为1，“低房价”为0
x[x<=5]=0
x[x>5]=1
print(x)

# 二维数组
y = np.arange(20).reshape(4,5)
print(y)
#
print(y>5)
#
print(y[y>5])  # X>5的boolean数组，既有行，又有列, 因此返回的是（行，列）一维结果
# 举例：怎样把第3列大于5的行筛选出来
print(y[:, 3]>5)  # 所有行，第四列>5的，行数。（以行为单位）【eg:第一行的，第四列为3<5，则第一行为false；第二行的，第四列为8>5，则第一行为true】
print(y[y[:, 3]>9])  # 输出的是完整的行；此些行满足的条件是这行第四列的元素>9
#
y[y[:, 3]>9] = 666
print(y)
#
x = np.arange(10)
print(x)
conditoion = (x%2==0) | (x>7)
print( conditoion )  # 得到一维数组都是布尔值
print(x[conditoion])  # x[布尔值类型] -- 意为：若为true则选择这个元素，若为false则不选择




